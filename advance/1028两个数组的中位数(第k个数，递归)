// 1028.cpp : 找第k个数，递归的方法
//

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

int findkth(vector<int> &nums1, vector<int> &nums2, int k)
{
	int m = nums1.size(), n = nums2.size();
	if (m>n)
	{
		return findkth(nums2, nums1, k);
	}
	if (m == 0)
	{
		return nums2[k - 1];
	}
	if (k == 1)
	{
		return ((nums1[0]<nums2[0]) ? nums1[0] : nums2[0]);
	}

	int pa = min(k / 2, m), pb = k - pa;
	if (nums1[pa - 1]<nums2[pb - 1])
	{
		nums1.erase(nums1.begin(), nums1.begin() + pa);
		return findkth(nums1, nums2, k - pa);
	}
	else if (nums1[pa - 1]>nums2[pb - 1])
	{
		nums2.erase(nums2.begin(), nums2.begin() + pb);
		return findkth(nums1, nums2, k - pb);
	}
	else return nums1[pa - 1];//两个相等，就是要找的数


}

int findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2)
{
	int total = nums1.size() + nums2.size();
	return findkth(nums1, nums2, (total+1) / 2  );
	

}

int main()
{
	vector<int> a;
	vector<int> b;
	int n;
	cin >> n;
	while (n--)
	{
		int t;
		cin >> t;
		a.push_back(t);
	}
	int m;
	cin >> m;
	while (m--)
	{
		int t;
		cin >> t;
		b.push_back(t);
	}
	cout << findMedianSortedArrays(a, b);
    return 0;
}

