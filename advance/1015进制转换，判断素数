// 1015.cpp : 判断素数
//熟悉进制转换，取余。判断素数时，循环到sqrt(n)，线判断是否是偶数，然后在循环的过程中直接加2
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

bool is_prime(int n)//判断素数，都是在10进制时
{
	if (n == 2) return 1;
	else if ((n == 1)||(n%2==0)) return 0;
	int ng = sqrt(float(n)) + 1;
	int i = 3;
	while (i <= ng)
	{
		if (n%i == 0) return 0;
		i+=2;
	}
	return 1;
}

int reverse_num(int n, int d)//返回翻转数
{
	int ans = 0;
	while (n)
	{
		ans = ans * d + n%d;
		n /= d;
	}
	return ans;
}
bool find_if_reversible_prime(int n, int d)
{
	return (is_prime(n) && is_prime(reverse_num(n, d)));
}

int main()
{
	int n, d;
	vector<bool> v;
	while (1)
	{
		cin >> n;
		if (n < 0)break;
		cin >> d;

		bool it = find_if_reversible_prime(n, d);
		v.push_back(it);
	}
	for (auto i : v)
	{
		if (i) cout << "Yes"<<endl;
		else cout << "No"<<endl;
	}
    return 0;
}

